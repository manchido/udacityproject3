version: 2.1

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id: 
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"      
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
  revert-migrations:
    description: Revert the last migration
    parameters:
        workflow_id:
            type: string 
            default: "${CIRCLE_WORKFLOW_ID:0:7}"     
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
                SUCCESS=$(curl --insecure  https://kvdb.io/HoH8XUdCH28nZGvZMQTDRL/migration_<< parameters.workflow_id >>)
                if (( $SUCCESS == 1 ));
                then
                    cd ~/project/backend
                    npm install
                    npm run migration:revert
                fi  
jobs: 
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
             cd frontend
             npm install
             npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: | 
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: | 
             cd frontend
             npm install
             npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: | 
             cd frontend
             npm install
             npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache: 
          keys: [frontend-build]
      - run:
          name: Analyze frontend
          command: |
             cd frontend
             npm install
             # npm install oauth-sign@^0.9.0
             npm audit fix --audit-level=critical --force
             
             
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache: 
          keys: [backend-build]
      - run:
          name: Analyze backend
          command: |
             cd frontend
             npm install
             # npm install oauth-sign@^0.9.0
             npm audit fix --audit-level=critical --force
      
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run: 
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
         
      - run: 
          name: Ensure back-end infrastructure exists
          command: |
             aws cloudformation deploy \
             --template-file .circleci/files/backend.yml \
             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
             --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
     
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - destroy-environment

  configure-infrastructure:
    docker: 
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
      
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout 
      - add_ssh_keys:
          fingerprints: ["39:59:e0:77:e0:83:1b:33:0c:8c:50:ef:1d:d7:b6:25"]
      - attach_workspace:
          at: ~/
      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure 

  run-migrations:
    docker: 
      - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      - checkout 
      - restore_cache:
           keys: [backend-build]
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
           
      - run:
          name: Send migration results to memstash
          command: |
             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
             then
             
             # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
             curl --insecure https://kvdb.io/HoH8XUdCH28nZGvZMQTDRL/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
             fi
      - revert-migrations 
  deploy-frontend:
    docker: 
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout 
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_16.x | bash -
            yum install -y nodejs 
            yum install -y python37
            curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
            python get-pip.py --user
            python -m pip install --user ansible
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run: 
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive     
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["39:59:e0:77:e0:83:1b:33:0c:8c:50:ef:1d:d7:b6:25"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip
            apk add --update nodejs nodejs-npm
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend/ -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
      
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs nodejs-npm
            apk --no-cache add curl
            python -m pip install awscli
            
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
             echo ${URL} 
             if curl -s ${URL} | grep "Welcome"
             then
                  
              return 0
             else
              return 1
             fi
      - destroy-environment
      - revert-migrations
  cloudfront-update:
    docker: 
      - image: amazon/aws-cli
      
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            curl -sL https://rpm.nodesource.com/setup_16.x | bash -
            yum install -y nodejs 
      - run:
          name: Update cloudfront distribution
          command: |
            
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name "Initialstack-${OldWorkFlowID}" \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

            
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo " Confirmed deletion of resources"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"

            else
              echo " Can't cleanup"
            fi

 

    
  
workflows:
  default:
    jobs:
      - build-frontend:
           filters:  
            branches:
              only:  
                - updates
                - master
      - build-backend
      - test-frontend:
           requires: [build-frontend]
           filters:  
            branches:
              only:  
                - updates
                - master
      - test-backend:
           requires: [build-backend]
           filters:  
            branches:
              only:  
                - updates
                - master
      - scan-backend:
           requires: [build-backend]
           filters:  
            branches:
              only:  
                - updates
                - master
      - scan-frontend:
           requires: [build-frontend]
           filters:  
            branches:
              only:  
                - updates
                - master
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:  
            branches:
              only:  
                - updates
                - master

      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:  
            branches:
              only:  
                - updates
                - master
      - run-migrations:
          requires: [configure-infrastructure]
          filters:  
            branches:
              only:  
                - updates
                - master
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only:
                - master
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only:
                - master
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only:
                - master
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only:
                - master
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only:
                - master